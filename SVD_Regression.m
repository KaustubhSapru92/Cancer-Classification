% loading the dataset
clear all
[n,t,r]=xlsread('mlb-player-stats-Batters.xls');
%% Extracting rows and coluns with numerical values only
for i = 1:611
    for j = 1:19
        A(i,j) = n(i,j);       
    end
end
%% Peforming SVD on the matrix A
A=double(A);
[U,S,V]=svd(A);

%% Computing the contribution of Singular Values to the percentage of data
clf
subplot(1,2,1)
plot(diag(S),'--ko','MarkerFaceColor','k')
xlabel('Column')
ylabel('Singular Value')
xlim([0 50]);

%The statistical interpretation of singular values is in the form of variance 
% in the data explained by the various components. The singular values produced
% by the svd() are in order from largest to smallest and when squared are
% proportional the amount of variance explained by a given singular vector.

B = (diag(S));
B = B.^2;
sum = sum(B);
%Variance =  Average of squared differences from the mean
for i = 1:19
    C(i)= B(i)/sum;
end

subplot(1,2,2)
plot(C','--ko','MarkerFaceColor','k')
xlabel('Column')
ylabel('Proportion of Variance Explained')

disp('The Proportion of Variance explained by the 1st SVD dimension in % is:')
disp(max(C)*100)

D= 0 ;
for i = 1:19
    D = D + C(i);
    if D > 0.99
        disp('The number of singular values required to explain more than 99% data is:')
        disp(i)
        break
    end
end
%% Question 3
u = abs(U); % we are looking at the magnitude of the values irrespective of the sign
u_Max = max(u(:,1:5));
F = [0 0 0 0 0];
disp('The players with the largest score magnitude for SVD dimensions 1 to 5:')
for i = 1:5
    F(i) = find(u(:,i) == u_Max(i)); % finds the highest value in each dimension
    disp(t(F(i)+1,1)) 
end
disp(F)
%% Question 4
v = abs(V);
v_Max = max(v(:,1:5));
F = [0 0 0 0 0]
disp('The offensive statistic with the largest weight magnitude are:')
for i = 1:5
    F(i) = find(v(:,i) == v_Max(i)); 
    disp(t(1,F(i)+3))
end
disp(F)
%% Question 5
clf
Z = A *V; %The V matrix represents the SVD dimensions and we consider the first 2
subplot(2,1,1)
plot(Z(:,1),Z(:,2), '.')
xlabel('SVD1 independent')
ylabel('SVD2 dependent')

x = Z(:,1);
y = Z(:,2);

p = polyfit(x,y,1)
yfit = polyval(p,x);
% plotting the line that regression has fit
hold on
plot(x,yfit,'--')
legend('Data','Model');
title('Data & Model')

disp('The equation of the Model is : SVD_2 = (0.5649)SVD_1 + 95.17')
% res stores the errors
res = y - yfit;

subplot(2,1,2)
bar(res)
title('Errors')
xlabel('Samples')
ylabel('Magnitude')
hold off
% defining the threshold, I define it with at least 3 standard deviations
% away from the mean of the errors
S = std(res);
M = mean(res);

p_threshold = M+3*S
n_threshold = M-3*S
%% Computing the outliers
% The outliers are the points which are far away from the line
% that has been generated by our regression model. Here I identify outliers
% as the values beyond the aforementioned threshold.
O = [(zeros(1,611))]';
outlier = [(zeros(1,611))]';
disp('The outliers are:')
for i = 1:611
    if (res(i) >= p_threshold) %considering positive values
        O(i) = i;
        outlier(i) = res(i);
        hold on
        subplot(2,1,1)
        plot(x(i),y(i),'-ro')
    end
    hold off
    if (res(i)<=n_threshold) %considering negative values
        O(i) = i;
        outlier(i) = res(i);
        hold on
        subplot(2,1,1)
        plot(x(i),y(i),'-ro')
    end
    hold off
    if O(i) > 0
        disp(r(i+1))
        disp(i)
    end
end


%% the largest outlier
% the point which is farthest from the our line or we can say the maximum 
% error
disp('Players with the largest outlier is :')
outlier = abs(outlier);
disp(max(outlier)) % identifyinig value with highest magnitude
for i = 1:611
     if outlier(i) == max(outlier)
         disp(r(i+1))
         disp(i)
     end
end
%%


